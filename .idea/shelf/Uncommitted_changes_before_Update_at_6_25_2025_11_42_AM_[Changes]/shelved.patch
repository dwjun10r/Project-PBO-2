Index: src/main/java/models/Voucher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\npublic class Voucher {\r\n    private int id;          // PRIMARY KEY\r\n    private String code;     // NOT NULL\r\n    private String description; // NOT NULL\r\n    private double discount; // NOT NULL\r\n    private String startDate; // TEXT NOT NULL, format \"YYYY-MM-DD hh:mm:ss\"\r\n    private String endDate;   // TEXT NOT NULL, format \"YYYY-MM-DD hh:mm:ss\"\r\n\r\n    // Constructor untuk data dari DB (dengan ID)\r\n    public Voucher(int id, String code, String description, double discount, String startDate, String endDate) {\r\n        this.id = id;\r\n        this.code = code;\r\n        this.description = description;\r\n        this.discount = discount;\r\n        this.startDate = startDate;\r\n        this.endDate = endDate;\r\n    }\r\n\r\n    // Constructor untuk membuat Voucher baru (tanpa ID)\r\n    public Voucher(String code, String description, double discount, String startDate, String endDate) {\r\n        this.code = code;\r\n        this.description = description;\r\n        this.discount = discount;\r\n        this.startDate = startDate;\r\n        this.endDate = endDate;\r\n    }\r\n\r\n    // Getters\r\n    public int getId() { return id; }\r\n    public String getCode() { return code; }\r\n    public String getDescription() { return description; }\r\n    public double getDiscount() { return discount; }\r\n    public String getStartDate() { return startDate; }\r\n    public String getEndDate() { return endDate; }\r\n\r\n    // Setters\r\n    public void setId(int id) { this.id = id; }\r\n    public void setCode(String code) { this.code = code; }\r\n    public void setDescription(String description) { this.description = description; }\r\n    public void setDiscount(double discount) { this.discount = discount; }\r\n    public void setStartDate(String startDate) { this.startDate = startDate; }\r\n    public void setEndDate(String endDate) { this.endDate = endDate; }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Voucher{\" +\r\n                \"id=\" + id +\r\n                \", code='\" + code + '\\'' +\r\n                \", discount=\" + discount +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/Voucher.java b/src/main/java/models/Voucher.java
--- a/src/main/java/models/Voucher.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/models/Voucher.java	(date 1750822964169)
@@ -1,12 +1,12 @@
 package models;
 
 public class Voucher {
-    private int id;          // PRIMARY KEY
-    private String code;     // NOT NULL
-    private String description; // NOT NULL
-    private double discount; // NOT NULL
-    private String startDate; // TEXT NOT NULL, format "YYYY-MM-DD hh:mm:ss"
-    private String endDate;   // TEXT NOT NULL, format "YYYY-MM-DD hh:mm:ss"
+    private int id;
+    private String code;
+    private String description;
+    private double discount;
+    private String startDate;
+    private String endDate;
 
     // Constructor untuk data dari DB (dengan ID)
     public Voucher(int id, String code, String description, double discount, String startDate, String endDate) {
Index: src/main/java/server/MainApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package server;\r\n\r\nimport config.DbConnection;\r\nimport java.sql.Connection;\r\nimport java.sql.ResultSet;\r\nimport java.sql.Statement;\r\n\r\npublic class MainApp {\r\n    public static void main(String[] args) throws Exception {\r\n        int port = 8080; // Default port\r\n        if (args.length == 1) {\r\n            port = Integer.parseInt(args[0]);\r\n        }\r\n\r\n        // Optional: Kode untuk cek koneksi atau tabel\r\n        try (Connection conn = DbConnection.connect()) {\r\n            if (conn != null) {\r\n                Statement stmt = conn.createStatement();\r\n                ResultSet rs = stmt.executeQuery(\"SELECT name FROM sqlite_master WHERE type='table';\");\r\n                System.out.println(\"Daftar tabel di villa.db:\");\r\n                while (rs.next()) {\r\n                    System.out.println(rs.getString(\"name\"));\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Terjadi kesalahan saat memeriksa database: \" + e.getMessage());\r\n        }\r\n\r\n        System.out.printf(\"Listening on port: %s...\\n\", port);\r\n        new Server(port); // Memulai server dari kelas Server baru\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/server/MainApp.java b/src/main/java/server/MainApp.java
--- a/src/main/java/server/MainApp.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/server/MainApp.java	(date 1750821711581)
@@ -7,12 +7,12 @@
 
 public class MainApp {
     public static void main(String[] args) throws Exception {
-        int port = 8080; // Default port
+        int port = 8080; // Port
         if (args.length == 1) {
             port = Integer.parseInt(args[0]);
         }
 
-        // Optional: Kode untuk cek koneksi atau tabel
+        // -----------------Kode untuk cek koneksi atau tabel-----------------
         try (Connection conn = DbConnection.connect()) {
             if (conn != null) {
                 Statement stmt = conn.createStatement();
@@ -27,6 +27,6 @@
         }
 
         System.out.printf("Listening on port: %s...\n", port);
-        new Server(port); // Memulai server dari kelas Server baru
+        new Server(port);
     }
 }
\ No newline at end of file
Index: .idea/dataSources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DataSourceManagerImpl\" format=\"xml\" multifile-model=\"true\">\r\n    <data-source source=\"LOCAL\" name=\"villa\" uuid=\"4b52b867-36e5-4b66-85ed-f27683d2fc13\">\r\n      <driver-ref>sqlite.xerial</driver-ref>\r\n      <synchronize>true</synchronize>\r\n      <jdbc-driver>org.sqlite.JDBC</jdbc-driver>\r\n      <jdbc-url>jdbc:sqlite:C:\\Users\\Asepp\\IdeaProjects\\Project-PBO-2\\src\\main\\resources\\database\\villa.db</jdbc-url>\r\n      <jdbc-additional-properties>\r\n        <property name=\"com.intellij.clouds.kubernetes.db.enabled\" value=\"false\" />\r\n      </jdbc-additional-properties>\r\n      <working-dir>$ProjectFileDir$</working-dir>\r\n      <libraries>\r\n        <library>\r\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/xerial/sqlite-jdbc/3.45.1.0/sqlite-jdbc-3.45.1.0.jar</url>\r\n        </library>\r\n        <library>\r\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar</url>\r\n        </library>\r\n      </libraries>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.xml b/.idea/dataSources.xml
--- a/.idea/dataSources.xml	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/.idea/dataSources.xml	(date 1750822402451)
@@ -19,5 +19,23 @@
         </library>
       </libraries>
     </data-source>
+    <data-source source="LOCAL" name="villa [2]" uuid="4c066b9b-e0af-487e-992d-bb1ff63d4482">
+      <driver-ref>sqlite.xerial</driver-ref>
+      <synchronize>true</synchronize>
+      <jdbc-driver>org.sqlite.JDBC</jdbc-driver>
+      <jdbc-url>jdbc:sqlite:C:\Users\mrkol\IdeaProjects\Project-PBO-2-Fix\src\main\resources\database\villa.db</jdbc-url>
+      <jdbc-additional-properties>
+        <property name="com.intellij.clouds.kubernetes.db.enabled" value="false" />
+      </jdbc-additional-properties>
+      <working-dir>$ProjectFileDir$</working-dir>
+      <libraries>
+        <library>
+          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/xerial/sqlite-jdbc/3.45.1.0/sqlite-jdbc-3.45.1.0.jar</url>
+        </library>
+        <library>
+          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar</url>
+        </library>
+      </libraries>
+    </data-source>
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/server/handlers/VoucherHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package server.handlers;\r\n\r\nimport com.sun.net.httpserver.HttpExchange;\r\nimport com.sun.net.httpserver.HttpHandler;\r\nimport models.Voucher;\r\nimport server.Request;\r\nimport server.Response;\r\nimport services.VoucherService; // Import service baru\r\n\r\nimport java.io.IOException;\r\nimport java.net.HttpURLConnection;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class VoucherHandler implements HttpHandler {\r\n\r\n    private final VoucherService voucherService;\r\n\r\n    public VoucherHandler(VoucherService voucherService) {\r\n        this.voucherService = voucherService;\r\n    }\r\n\r\n    private int extractIdFromPath(String path, String regexPattern) {\r\n        Pattern pattern = Pattern.compile(regexPattern);\r\n        Matcher matcher = pattern.matcher(path);\r\n        if (matcher.find() && matcher.groupCount() >= 1) {\r\n            try {\r\n                return Integer.parseInt(matcher.group(1));\r\n            } catch (NumberFormatException e) {\r\n                return -1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public void handle(HttpExchange httpExchange) throws IOException {\r\n        Request req = new Request(httpExchange);\r\n        Response res = new Response(httpExchange);\r\n        String path = httpExchange.getRequestURI().getPath();\r\n        String method = req.getRequestMethod();\r\n\r\n        try {\r\n            if (\"GET\".equals(method)) {\r\n                if (path.equals(\"/vouchers\")) {\r\n                    handleGetAllVouchers(res);\r\n                } else if (path.matches(\"/vouchers/\\\\d+\")) {\r\n                    handleGetVoucherById(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for GET on Voucher\");\r\n                }\r\n            } else if (\"POST\".equals(method)) {\r\n                if (path.equals(\"/vouchers\")) {\r\n                    handleAddVoucher(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for POST on Voucher\");\r\n                }\r\n            } else if (\"PUT\".equals(method)) {\r\n                if (path.matches(\"/vouchers/\\\\d+\")) {\r\n                    handleUpdateVoucher(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for PUT on Voucher\");\r\n                }\r\n            } else if (\"DELETE\".equals(method)) {\r\n                if (path.matches(\"/vouchers/\\\\d+\")) {\r\n                    handleDeleteVoucher(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for DELETE on Voucher\");\r\n                }\r\n            } else {\r\n                res.sendError(405, \"Method Not Allowed\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error in VoucherHandler: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            res.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR, \"Internal Server Error: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void handleGetAllVouchers(Response res) throws IOException {\r\n        List<Voucher> vouchers = voucherService.getAllVouchers();\r\n        res.sendJson(HttpURLConnection.HTTP_OK, vouchers);\r\n    }\r\n\r\n    private void handleGetVoucherById(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/vouchers/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Voucher ID\");\r\n            return;\r\n        }\r\n        Voucher voucher = voucherService.getVoucherById(id);\r\n        if (voucher != null) {\r\n            res.sendJson(HttpURLConnection.HTTP_OK, voucher);\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Voucher not found\");\r\n        }\r\n    }\r\n\r\n    private void handleAddVoucher(Request req, Response res) throws IOException {\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        String code = (String) reqJsonMap.get(\"code\");\r\n        String description = (String) reqJsonMap.get(\"description\");\r\n        Double discount = (Double) reqJsonMap.get(\"discount\");\r\n        String startDate = (String) reqJsonMap.get(\"startDate\");\r\n        String endDate = (String) reqJsonMap.get(\"endDate\");\r\n\r\n        Voucher newVoucher = new Voucher(code, description, discount, startDate, endDate);\r\n\r\n        if (voucherService.addVoucher(newVoucher)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_CREATED, \"Voucher added successfully\");\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to add voucher. Check provided data and date format.\");\r\n        }\r\n    }\r\n\r\n    private void handleUpdateVoucher(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/vouchers/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Voucher ID\");\r\n            return;\r\n        }\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        String code = (String) reqJsonMap.get(\"code\");\r\n        String description = (String) reqJsonMap.get(\"description\");\r\n        Double discount = (Double) reqJsonMap.get(\"discount\");\r\n        String startDate = (String) reqJsonMap.get(\"startDate\");\r\n        String endDate = (String) reqJsonMap.get(\"endDate\");\r\n\r\n        Voucher updatedVoucher = new Voucher(id, code, description, discount, startDate, endDate);\r\n\r\n        if (voucherService.updateVoucher(updatedVoucher)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_OK, \"Voucher updated successfully\");\r\n        } else {\r\n            if (voucherService.getVoucherById(id) == null) {\r\n                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Voucher not found\");\r\n            } else {\r\n                res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to update voucher. Check provided data and date format.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void handleDeleteVoucher(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/vouchers/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Voucher ID\");\r\n            return;\r\n        }\r\n\r\n        if (voucherService.deleteVoucher(id)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_OK, \"Voucher deleted successfully\");\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Voucher not found or failed to delete\");\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/server/handlers/VoucherHandler.java b/src/main/java/server/handlers/VoucherHandler.java
--- a/src/main/java/server/handlers/VoucherHandler.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/server/handlers/VoucherHandler.java	(date 1750821716911)
@@ -2,10 +2,10 @@
 
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpHandler;
+import dao.VoucherDAO;
 import models.Voucher;
 import server.Request;
 import server.Response;
-import services.VoucherService; // Import service baru
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -15,12 +15,7 @@
 import java.util.regex.Pattern;
 
 public class VoucherHandler implements HttpHandler {
-
-    private final VoucherService voucherService;
-
-    public VoucherHandler(VoucherService voucherService) {
-        this.voucherService = voucherService;
-    }
+    private final VoucherDAO voucherDAO = new VoucherDAO();
 
     private int extractIdFromPath(String path, String regexPattern) {
         Pattern pattern = Pattern.compile(regexPattern);
@@ -44,33 +39,34 @@
 
         try {
             if ("GET".equals(method)) {
-                if (path.equals("/vouchers")) {
+                if (path.equals("/vouchers")) { // GET /vouchers
                     handleGetAllVouchers(res);
-                } else if (path.matches("/vouchers/\\d+")) {
+                } else if (path.matches("/vouchers/\\d+")) { // GET /vouchers/{id}
                     handleGetVoucherById(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for GET on Voucher");
                 }
             } else if ("POST".equals(method)) {
-                if (path.equals("/vouchers")) {
+                if (path.equals("/vouchers")) { // POST /vouchers
                     handleAddVoucher(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for POST on Voucher");
                 }
             } else if ("PUT".equals(method)) {
-                if (path.matches("/vouchers/\\d+")) {
+                if (path.matches("/vouchers/\\d+")) { // PUT /vouchers/{id}
                     handleUpdateVoucher(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for PUT on Voucher");
                 }
             } else if ("DELETE".equals(method)) {
-                if (path.matches("/vouchers/\\d+")) {
+                if (path.matches("/vouchers/\\d+")) { // DELETE /vouchers/{id}
                     handleDeleteVoucher(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for DELETE on Voucher");
                 }
             } else {
                 res.sendError(405, "Method Not Allowed");
+
             }
         } catch (Exception e) {
             System.err.println("Error in VoucherHandler: " + e.getMessage());
@@ -80,7 +76,7 @@
     }
 
     private void handleGetAllVouchers(Response res) throws IOException {
-        List<Voucher> vouchers = voucherService.getAllVouchers();
+        List<Voucher> vouchers = voucherDAO.getAllVouchers();
         res.sendJson(HttpURLConnection.HTTP_OK, vouchers);
     }
 
@@ -90,7 +86,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Voucher ID");
             return;
         }
-        Voucher voucher = voucherService.getVoucherById(id);
+        Voucher voucher = voucherDAO.getVoucherById(id);
         if (voucher != null) {
             res.sendJson(HttpURLConnection.HTTP_OK, voucher);
         } else {
@@ -106,12 +102,22 @@
         String startDate = (String) reqJsonMap.get("startDate");
         String endDate = (String) reqJsonMap.get("endDate");
 
+        if (code == null || code.isEmpty() || description == null || description.isEmpty() || discount == null ||
+                startDate == null || startDate.isEmpty() || endDate == null || endDate.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields for Voucher");
+            return;
+        }
+        Pattern dateFormat = Pattern.compile("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}");
+        if (!dateFormat.matcher(startDate).matches() || !dateFormat.matcher(endDate).matches()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid date format. Use YYYY-MM-DD hh:mm:ss");
+            return;
+        }
+
         Voucher newVoucher = new Voucher(code, description, discount, startDate, endDate);
-
-        if (voucherService.addVoucher(newVoucher)) {
+        if (voucherDAO.addVoucher(newVoucher)) {
             res.sendSuccess(HttpURLConnection.HTTP_CREATED, "Voucher added successfully");
         } else {
-            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add voucher. Check provided data and date format.");
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add voucher or invalid data");
         }
     }
 
@@ -128,16 +134,22 @@
         String startDate = (String) reqJsonMap.get("startDate");
         String endDate = (String) reqJsonMap.get("endDate");
 
+        if (code == null || code.isEmpty() || description == null || description.isEmpty() || discount == null ||
+                startDate == null || startDate.isEmpty() || endDate == null || endDate.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields for Voucher update");
+            return;
+        }
+        Pattern dateFormat = Pattern.compile("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}");
+        if (!dateFormat.matcher(startDate).matches() || !dateFormat.matcher(endDate).matches()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid date format. Use YYYY-MM-DD hh:mm:ss");
+            return;
+        }
+
         Voucher updatedVoucher = new Voucher(id, code, description, discount, startDate, endDate);
-
-        if (voucherService.updateVoucher(updatedVoucher)) {
+        if (voucherDAO.updateVoucher(updatedVoucher)) {
             res.sendSuccess(HttpURLConnection.HTTP_OK, "Voucher updated successfully");
         } else {
-            if (voucherService.getVoucherById(id) == null) {
-                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Voucher not found");
-            } else {
-                res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to update voucher. Check provided data and date format.");
-            }
+            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Voucher not found or failed to update");
         }
     }
 
@@ -147,8 +159,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Voucher ID");
             return;
         }
-
-        if (voucherService.deleteVoucher(id)) {
+        if (voucherDAO.deleteVoucher(id)) {
             res.sendSuccess(HttpURLConnection.HTTP_OK, "Voucher deleted successfully");
         } else {
             res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Voucher not found or failed to delete");
Index: src/main/java/server/handlers/VillaHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package server.handlers;\r\n\r\nimport com.sun.net.httpserver.HttpExchange;\r\nimport com.sun.net.httpserver.HttpHandler;\r\nimport models.Booking;\r\nimport models.RoomType;\r\nimport models.Villa;\r\nimport models.Review;\r\nimport server.Request;\r\nimport server.Response;\r\nimport services.VillaService; // Import service baru\r\n\r\nimport java.io.IOException;\r\nimport java.net.HttpURLConnection;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class VillaHandler implements HttpHandler {\r\n\r\n    private final VillaService villaService;\r\n\r\n    public VillaHandler(VillaService villaService) {\r\n        this.villaService = villaService;\r\n    }\r\n\r\n    private int extractIdFromPath(String path, String regexPattern) {\r\n        Pattern pattern = Pattern.compile(regexPattern);\r\n        Matcher matcher = pattern.matcher(path);\r\n        if (matcher.find() && matcher.groupCount() >= 1) {\r\n            try {\r\n                return Integer.parseInt(matcher.group(1));\r\n            } catch (NumberFormatException e) {\r\n                return -1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    private Map<String, String> parseQueryParams(java.net.URI uri) {\r\n        String query = uri.getQuery();\r\n        if (query == null || query.isEmpty()) {\r\n            return Map.of();\r\n        }\r\n        return java.util.Arrays.stream(query.split(\"&\"))\r\n                .map(s -> s.split(\"=\"))\r\n                .filter(a -> a.length == 2)\r\n                .collect(java.util.stream.Collectors.toMap(a -> a[0], a -> a[1]));\r\n    }\r\n\r\n    @Override\r\n    public void handle(HttpExchange httpExchange) throws IOException {\r\n        Request req = new Request(httpExchange);\r\n        Response res = new Response(httpExchange);\r\n        String path = httpExchange.getRequestURI().getPath();\r\n        String method = req.getRequestMethod();\r\n        String query = httpExchange.getRequestURI().getQuery();\r\n\r\n        try {\r\n            if (\"GET\".equals(method)) {\r\n                if (path.equals(\"/villas\")) {\r\n                    if (query != null && query.contains(\"ci_date\") && query.contains(\"co_date\")) {\r\n                        handleSearchVillasByAvailability(req, res);\r\n                    } else {\r\n                        handleGetAllVillas(res);\r\n                    }\r\n                } else if (path.matches(\"/villas/\\\\d+\")) {\r\n                    handleGetVillaById(req, res);\r\n                } else if (path.matches(\"/villas/\\\\d+/rooms\")) {\r\n                    handleGetRoomsByVillaId(req, res);\r\n                } else if (path.matches(\"/villas/\\\\d+/bookings\")) {\r\n                    handleGetBookingsByVillaId(req, res);\r\n                } else if (path.matches(\"/villas/\\\\d+/reviews\")) {\r\n                    handleGetReviewsByVillaId(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for GET on Villa\");\r\n                }\r\n            } else if (\"POST\".equals(method)) {\r\n                if (path.equals(\"/villas\")) {\r\n                    handleAddVilla(req, res);\r\n                } else if (path.matches(\"/villas/\\\\d+/rooms\")) {\r\n                    handleAddRoomTypeToVilla(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for POST on Villa\");\r\n                }\r\n            } else if (\"PUT\".equals(method)) {\r\n                if (path.matches(\"/villas/\\\\d+\")) {\r\n                    handleUpdateVilla(req, res);\r\n                } else if (path.matches(\"/villas/\\\\d+/rooms/\\\\d+\")) {\r\n                    handleUpdateRoomTypeInVilla(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for PUT on Villa\");\r\n                }\r\n            } else if (\"DELETE\".equals(method)) {\r\n                if (path.matches(\"/villas/\\\\d+/rooms/\\\\d+\")) {\r\n                    handleDeleteRoomTypeInVilla(req, res);\r\n                } else if (path.matches(\"/villas/\\\\d+\")) {\r\n                    handleDeleteVilla(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for DELETE on Villa\");\r\n                }\r\n            } else {\r\n                res.sendError(405, \"Method Not Allowed\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error in VillaHandler: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            res.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR, \"Internal Server Error: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void handleGetAllVillas(Response res) throws IOException {\r\n        List<Villa> villas = villaService.getAllVillas();\r\n        res.sendJson(HttpURLConnection.HTTP_OK, villas);\r\n    }\r\n\r\n    private void handleGetVillaById(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/villas/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Villa ID\");\r\n            return;\r\n        }\r\n        Villa villa = villaService.getVillaById(id);\r\n        if (villa != null) {\r\n            res.sendJson(HttpURLConnection.HTTP_OK, villa);\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Villa not found\");\r\n        }\r\n    }\r\n\r\n    private void handleGetRoomsByVillaId(Request req, Response res) throws IOException {\r\n        int villaId = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/villas/(\\\\d+)/rooms\");\r\n        if (villaId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Villa ID\");\r\n            return;\r\n        }\r\n        List<RoomType> roomTypes = villaService.getRoomTypesByVillaId(villaId);\r\n        res.sendJson(HttpURLConnection.HTTP_OK, roomTypes);\r\n    }\r\n\r\n    private void handleGetBookingsByVillaId(Request req, Response res) throws IOException {\r\n        int villaId = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/villas/(\\\\d+)/bookings\");\r\n        if (villaId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Villa ID\");\r\n            return;\r\n        }\r\n        List<Booking> bookings = villaService.getBookingsByVillaId(villaId);\r\n        res.sendJson(HttpURLConnection.HTTP_OK, bookings);\r\n    }\r\n\r\n    private void handleGetReviewsByVillaId(Request req, Response res) throws IOException {\r\n        int villaId = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/villas/(\\\\d+)/reviews\");\r\n        if (villaId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Villa ID\");\r\n            return;\r\n        }\r\n        List<Review> reviews = villaService.getReviewsByVillaId(villaId);\r\n        res.sendJson(HttpURLConnection.HTTP_OK, reviews);\r\n    }\r\n\r\n    private void handleSearchVillasByAvailability(Request req, Response res) throws IOException {\r\n        Map<String, String> params = parseQueryParams(req.getHttpExchange().getRequestURI());\r\n        String checkinDate = params.get(\"ci_date\");\r\n        String checkoutDate = params.get(\"co_date\");\r\n\r\n        List<Villa> availableVillas = villaService.searchVillasByAvailability(checkinDate, checkoutDate);\r\n\r\n        if (availableVillas != null) {\r\n            res.sendJson(HttpURLConnection.HTTP_OK, availableVillas);\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Missing or invalid date format for ci_date or co_date query parameters. Use YYYY-MM-DD hh:mm:ss.\");\r\n        }\r\n    }\r\n\r\n    private void handleAddVilla(Request req, Response res) throws IOException {\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        String name = (String) reqJsonMap.get(\"name\");\r\n        String description = (String) reqJsonMap.get(\"description\");\r\n        String address = (String) reqJsonMap.get(\"address\");\r\n\r\n        Villa newVilla = new Villa(0, name, description, address);\r\n\r\n        if (villaService.addVilla(newVilla)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_CREATED, \"Villa added successfully\");\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to add villa. Missing required fields (name, description, address) or invalid data.\");\r\n        }\r\n    }\r\n\r\n    private void handleAddRoomTypeToVilla(Request req, Response res) throws IOException {\r\n        int villaId = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/villas/(\\\\d+)/rooms\");\r\n        if (villaId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Villa ID\");\r\n            return;\r\n        }\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        String name = (String) reqJsonMap.get(\"name\");\r\n        Integer quantity = (Integer) reqJsonMap.get(\"quantity\");\r\n        Integer capacity = (Integer) reqJsonMap.get(\"capacity\");\r\n        Integer price = (Integer) reqJsonMap.get(\"price\");\r\n        String bedSize = (String) reqJsonMap.get(\"bedSize\");\r\n        Boolean hasDesk = (Boolean) reqJsonMap.get(\"hasDesk\");\r\n        Boolean hasAc = (Boolean) reqJsonMap.get(\"hasAc\");\r\n        Boolean hasTv = (Boolean) reqJsonMap.get(\"hasTv\");\r\n        Boolean hasWifi = (Boolean) reqJsonMap.get(\"hasWifi\");\r\n        Boolean hasShower = (Boolean) reqJsonMap.get(\"hasShower\");\r\n        Boolean hasHotwater = (Boolean) reqJsonMap.get(\"hasHotwater\");\r\n        Boolean hasFridge = (Boolean) reqJsonMap.get(\"hasFridge\");\r\n\r\n        RoomType newRoomType = new RoomType(\r\n                0, villaId, name, quantity, capacity, price, bedSize,\r\n                hasDesk != null && hasDesk ? 1 : 0,\r\n                hasAc != null && hasAc ? 1 : 0,\r\n                hasTv != null && hasTv ? 1 : 0,\r\n                hasWifi != null && hasWifi ? 1 : 0,\r\n                hasShower != null && hasShower ? 1 : 0,\r\n                hasHotwater != null && hasHotwater ? 1 : 0,\r\n                hasFridge != null && hasFridge ? 1 : 0\r\n        );\r\n\r\n        if (villaService.addRoomTypeToVilla(villaId, newRoomType)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_CREATED, \"Room Type added successfully to villa \" + villaId);\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to add room type. Missing required fields or invalid data.\");\r\n        }\r\n    }\r\n\r\n    private void handleUpdateVilla(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/villas/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Villa ID\");\r\n            return;\r\n        }\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        String name = (String) reqJsonMap.get(\"name\");\r\n        String description = (String) reqJsonMap.get(\"description\");\r\n        String address = (String) reqJsonMap.get(\"address\");\r\n\r\n        Villa updatedVilla = new Villa(id, name, description, address);\r\n\r\n        if (villaService.updateVilla(updatedVilla)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_OK, \"Villa updated successfully\");\r\n        } else {\r\n            if (villaService.getVillaById(id) == null) {\r\n                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Villa not found\");\r\n            } else {\r\n                res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to update villa. Check provided data.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void handleUpdateRoomTypeInVilla(Request req, Response res) throws IOException {\r\n        Pattern pattern = Pattern.compile(\"/villas/(\\\\d+)/rooms/(\\\\d+)\");\r\n        Matcher matcher = pattern.matcher(req.getHttpExchange().getRequestURI().getPath());\r\n\r\n        int villaId = -1;\r\n        int roomTypeId = -1;\r\n        if (matcher.find() && matcher.groupCount() == 2) {\r\n            try {\r\n                villaId = Integer.parseInt(matcher.group(1));\r\n                roomTypeId = Integer.parseInt(matcher.group(2));\r\n            } catch (NumberFormatException e) { /* handled by -1 defaults */ }\r\n        }\r\n\r\n        if (villaId == -1 || roomTypeId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Villa ID or Room ID in path\");\r\n            return;\r\n        }\r\n\r\n\r\n        final int finalRoomTypeId = roomTypeId;\r\n        final int finalVillaId = villaId;\r\n\r\n\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        String name = (String) reqJsonMap.get(\"name\");\r\n        Integer quantity = (Integer) reqJsonMap.get(\"quantity\");\r\n        Integer capacity = (Integer) reqJsonMap.get(\"capacity\");\r\n        Integer price = (Integer) reqJsonMap.get(\"price\");\r\n        String bedSize = (String) reqJsonMap.get(\"bedSize\");\r\n        Boolean hasDesk = (Boolean) reqJsonMap.get(\"hasDesk\");\r\n        Boolean hasAc = (Boolean) reqJsonMap.get(\"hasAc\");\r\n        Boolean hasTv = (Boolean) reqJsonMap.get(\"hasTv\");\r\n        Boolean hasWifi = (Boolean) reqJsonMap.get(\"hasWifi\");\r\n        Boolean hasShower = (Boolean) reqJsonMap.get(\"hasShower\");\r\n        Boolean hasHotwater = (Boolean) reqJsonMap.get(\"hasHotwater\");\r\n        Boolean hasFridge = (Boolean) reqJsonMap.get(\"hasFridge\");\r\n\r\n        RoomType updatedRoomType = new RoomType(\r\n                finalRoomTypeId, finalVillaId, name, quantity, capacity, price, bedSize,\r\n                hasDesk != null && hasDesk ? 1 : 0,\r\n                hasAc != null && hasAc ? 1 : 0,\r\n                hasTv != null && hasTv ? 1 : 0,\r\n                hasWifi != null && hasWifi ? 1 : 0,\r\n                hasShower != null && hasShower ? 1 : 0,\r\n                hasHotwater != null && hasHotwater ? 1 : 0,\r\n                hasFridge != null && hasFridge ? 1 : 0\r\n        );\r\n\r\n        if (villaService.updateRoomTypeInVilla(updatedRoomType)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_OK, \"Room Type updated successfully\");\r\n        } else {\r\n            if (villaService.getRoomTypesByVillaId(finalVillaId).stream().noneMatch(rt -> rt.getId() == finalRoomTypeId)) {\r\n                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Room Type not found in specified Villa\");\r\n            } else {\r\n                res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to update room type. Check provided data.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void handleDeleteRoomTypeInVilla(Request req, Response res) throws IOException {\r\n        int roomTypeId = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/villas/\\\\d+/rooms/(\\\\d+)\");\r\n        if (roomTypeId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Room ID\");\r\n            return;\r\n        }\r\n\r\n        if (villaService.deleteRoomType(roomTypeId)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_OK, \"Room Type deleted successfully\");\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Room Type not found or failed to delete\");\r\n        }\r\n    }\r\n\r\n    private void handleDeleteVilla(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/villas/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Villa ID\");\r\n            return;\r\n        }\r\n\r\n        if (villaService.deleteVilla(id)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_OK, \"Villa deleted successfully\");\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Villa not found or failed to delete\");\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/server/handlers/VillaHandler.java b/src/main/java/server/handlers/VillaHandler.java
--- a/src/main/java/server/handlers/VillaHandler.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/server/handlers/VillaHandler.java	(date 1750821719144)
@@ -2,13 +2,16 @@
 
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpHandler;
+import dao.BookingDAO;
+import dao.ReviewDAO;
+import dao.RoomTypeDAO;
+import dao.VillaDAO;
 import models.Booking;
 import models.RoomType;
 import models.Villa;
 import models.Review;
 import server.Request;
 import server.Response;
-import services.VillaService; // Import service baru
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -19,11 +22,10 @@
 
 public class VillaHandler implements HttpHandler {
 
-    private final VillaService villaService;
-
-    public VillaHandler(VillaService villaService) {
-        this.villaService = villaService;
-    }
+    private final VillaDAO villaDAO = new VillaDAO();
+    private final RoomTypeDAO roomTypeDAO = new RoomTypeDAO();
+    private final BookingDAO bookingDAO = new BookingDAO();
+    private final ReviewDAO reviewDAO = new ReviewDAO();
 
     private int extractIdFromPath(String path, String regexPattern) {
         Pattern pattern = Pattern.compile(regexPattern);
@@ -62,46 +64,47 @@
                 if (path.equals("/villas")) {
                     if (query != null && query.contains("ci_date") && query.contains("co_date")) {
                         handleSearchVillasByAvailability(req, res);
-                    } else {
+                    } else { // GET /villas
                         handleGetAllVillas(res);
                     }
-                } else if (path.matches("/villas/\\d+")) {
+                } else if (path.matches("/villas/\\d+")) { // GET /villas/{id}
                     handleGetVillaById(req, res);
-                } else if (path.matches("/villas/\\d+/rooms")) {
+                } else if (path.matches("/villas/\\d+/rooms")) { // GET /villas/{id}/rooms
                     handleGetRoomsByVillaId(req, res);
-                } else if (path.matches("/villas/\\d+/bookings")) {
+                } else if (path.matches("/villas/\\d+/bookings")) { // GET /villas/{id}/bookings
                     handleGetBookingsByVillaId(req, res);
-                } else if (path.matches("/villas/\\d+/reviews")) {
+                } else if (path.matches("/villas/\\d+/reviews")) { // GET /villas/{id}/reviews
                     handleGetReviewsByVillaId(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for GET on Villa");
                 }
             } else if ("POST".equals(method)) {
-                if (path.equals("/villas")) {
+                if (path.equals("/villas")) { // POST /villas
                     handleAddVilla(req, res);
-                } else if (path.matches("/villas/\\d+/rooms")) {
+                } else if (path.matches("/villas/\\d+/rooms")) { // POST /villas/{id}/rooms
                     handleAddRoomTypeToVilla(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for POST on Villa");
                 }
             } else if ("PUT".equals(method)) {
-                if (path.matches("/villas/\\d+")) {
+                if (path.matches("/villas/\\d+")) { // PUT /villas/{id}
                     handleUpdateVilla(req, res);
-                } else if (path.matches("/villas/\\d+/rooms/\\d+")) {
+                } else if (path.matches("/villas/\\d+/rooms/\\d+")) { // PUT /villas/{id}/rooms/{id}
                     handleUpdateRoomTypeInVilla(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for PUT on Villa");
                 }
             } else if ("DELETE".equals(method)) {
-                if (path.matches("/villas/\\d+/rooms/\\d+")) {
+                if (path.matches("/villas/\\d+/rooms/\\d+")) { // DELETE /villas/{id}/rooms/{id}
                     handleDeleteRoomTypeInVilla(req, res);
-                } else if (path.matches("/villas/\\d+")) {
+                } else if (path.matches("/villas/\\d+")) { // DELETE /villas/{id}
                     handleDeleteVilla(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for DELETE on Villa");
                 }
             } else {
                 res.sendError(405, "Method Not Allowed");
+
             }
         } catch (Exception e) {
             System.err.println("Error in VillaHandler: " + e.getMessage());
@@ -111,7 +114,7 @@
     }
 
     private void handleGetAllVillas(Response res) throws IOException {
-        List<Villa> villas = villaService.getAllVillas();
+        List<Villa> villas = villaDAO.getAllVillas();
         res.sendJson(HttpURLConnection.HTTP_OK, villas);
     }
 
@@ -121,7 +124,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Villa ID");
             return;
         }
-        Villa villa = villaService.getVillaById(id);
+        Villa villa = villaDAO.getVillaById(id);
         if (villa != null) {
             res.sendJson(HttpURLConnection.HTTP_OK, villa);
         } else {
@@ -135,7 +138,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Villa ID");
             return;
         }
-        List<RoomType> roomTypes = villaService.getRoomTypesByVillaId(villaId);
+        List<RoomType> roomTypes = roomTypeDAO.getRoomTypesByVillaId(villaId);
         res.sendJson(HttpURLConnection.HTTP_OK, roomTypes);
     }
 
@@ -145,7 +148,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Villa ID");
             return;
         }
-        List<Booking> bookings = villaService.getBookingsByVillaId(villaId);
+        List<Booking> bookings = bookingDAO.getBookingsByVillaId(villaId);
         res.sendJson(HttpURLConnection.HTTP_OK, bookings);
     }
 
@@ -155,7 +158,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Villa ID");
             return;
         }
-        List<Review> reviews = villaService.getReviewsByVillaId(villaId);
+        List<Review> reviews = reviewDAO.getReviewsByVillaId(villaId);
         res.sendJson(HttpURLConnection.HTTP_OK, reviews);
     }
 
@@ -164,27 +167,32 @@
         String checkinDate = params.get("ci_date");
         String checkoutDate = params.get("co_date");
 
-        List<Villa> availableVillas = villaService.searchVillasByAvailability(checkinDate, checkoutDate);
+        if (checkinDate == null || checkinDate.isEmpty() || checkoutDate == null || checkoutDate.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing ci_date or co_date query parameters");
+            return;
+        }
 
-        if (availableVillas != null) {
-            res.sendJson(HttpURLConnection.HTTP_OK, availableVillas);
-        } else {
-            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing or invalid date format for ci_date or co_date query parameters. Use YYYY-MM-DD hh:mm:ss.");
-        }
+        List<Villa> availableVillas = villaDAO.searchVillasByAvailability(checkinDate, checkoutDate);
+        res.sendJson(HttpURLConnection.HTTP_OK, availableVillas);
     }
 
     private void handleAddVilla(Request req, Response res) throws IOException {
         Map<String, Object> reqJsonMap = req.getJSON();
+
         String name = (String) reqJsonMap.get("name");
         String description = (String) reqJsonMap.get("description");
         String address = (String) reqJsonMap.get("address");
 
+        if (name == null || name.isEmpty() || description == null || description.isEmpty() || address == null || address.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields (name, description, address)");
+            return;
+        }
+
         Villa newVilla = new Villa(0, name, description, address);
-
-        if (villaService.addVilla(newVilla)) {
+        if (villaDAO.addVilla(newVilla)) {
             res.sendSuccess(HttpURLConnection.HTTP_CREATED, "Villa added successfully");
         } else {
-            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add villa. Missing required fields (name, description, address) or invalid data.");
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add villa or invalid data");
         }
     }
 
@@ -195,6 +203,7 @@
             return;
         }
         Map<String, Object> reqJsonMap = req.getJSON();
+
         String name = (String) reqJsonMap.get("name");
         Integer quantity = (Integer) reqJsonMap.get("quantity");
         Integer capacity = (Integer) reqJsonMap.get("capacity");
@@ -208,6 +217,11 @@
         Boolean hasHotwater = (Boolean) reqJsonMap.get("hasHotwater");
         Boolean hasFridge = (Boolean) reqJsonMap.get("hasFridge");
 
+        if (name == null || name.isEmpty() || quantity == null || capacity == null || price == null || bedSize == null || bedSize.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields for Room Type");
+            return;
+        }
+
         RoomType newRoomType = new RoomType(
                 0, villaId, name, quantity, capacity, price, bedSize,
                 hasDesk != null && hasDesk ? 1 : 0,
@@ -219,10 +233,10 @@
                 hasFridge != null && hasFridge ? 1 : 0
         );
 
-        if (villaService.addRoomTypeToVilla(villaId, newRoomType)) {
+        if (roomTypeDAO.addRoomType(newRoomType)) {
             res.sendSuccess(HttpURLConnection.HTTP_CREATED, "Room Type added successfully to villa " + villaId);
         } else {
-            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add room type. Missing required fields or invalid data.");
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add room type or invalid data");
         }
     }
 
@@ -237,30 +251,29 @@
         String description = (String) reqJsonMap.get("description");
         String address = (String) reqJsonMap.get("address");
 
+        if (name == null || name.isEmpty() || description == null || description.isEmpty() || address == null || address.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields for Villa update");
+            return;
+        }
+
         Villa updatedVilla = new Villa(id, name, description, address);
-
-        if (villaService.updateVilla(updatedVilla)) {
+        if (villaDAO.updateVilla(updatedVilla)) {
             res.sendSuccess(HttpURLConnection.HTTP_OK, "Villa updated successfully");
         } else {
-            if (villaService.getVillaById(id) == null) {
-                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Villa not found");
-            } else {
-                res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to update villa. Check provided data.");
-            }
+            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Villa not found or failed to update");
         }
     }
 
     private void handleUpdateRoomTypeInVilla(Request req, Response res) throws IOException {
         Pattern pattern = Pattern.compile("/villas/(\\d+)/rooms/(\\d+)");
         Matcher matcher = pattern.matcher(req.getHttpExchange().getRequestURI().getPath());
-
         int villaId = -1;
         int roomTypeId = -1;
         if (matcher.find() && matcher.groupCount() == 2) {
             try {
                 villaId = Integer.parseInt(matcher.group(1));
                 roomTypeId = Integer.parseInt(matcher.group(2));
-            } catch (NumberFormatException e) { /* handled by -1 defaults */ }
+            } catch (NumberFormatException e) { }
         }
 
         if (villaId == -1 || roomTypeId == -1) {
@@ -268,11 +281,6 @@
             return;
         }
 
-
-        final int finalRoomTypeId = roomTypeId;
-        final int finalVillaId = villaId;
-
-
         Map<String, Object> reqJsonMap = req.getJSON();
         String name = (String) reqJsonMap.get("name");
         Integer quantity = (Integer) reqJsonMap.get("quantity");
@@ -287,8 +295,13 @@
         Boolean hasHotwater = (Boolean) reqJsonMap.get("hasHotwater");
         Boolean hasFridge = (Boolean) reqJsonMap.get("hasFridge");
 
+        if (name == null || name.isEmpty() || quantity == null || capacity == null || price == null || bedSize == null || bedSize.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields for Room Type update");
+            return;
+        }
+
         RoomType updatedRoomType = new RoomType(
-                finalRoomTypeId, finalVillaId, name, quantity, capacity, price, bedSize,
+                roomTypeId, villaId, name, quantity, capacity, price, bedSize,
                 hasDesk != null && hasDesk ? 1 : 0,
                 hasAc != null && hasAc ? 1 : 0,
                 hasTv != null && hasTv ? 1 : 0,
@@ -298,14 +311,10 @@
                 hasFridge != null && hasFridge ? 1 : 0
         );
 
-        if (villaService.updateRoomTypeInVilla(updatedRoomType)) {
+        if (roomTypeDAO.updateRoomType(updatedRoomType)) {
             res.sendSuccess(HttpURLConnection.HTTP_OK, "Room Type updated successfully");
         } else {
-            if (villaService.getRoomTypesByVillaId(finalVillaId).stream().noneMatch(rt -> rt.getId() == finalRoomTypeId)) {
-                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Room Type not found in specified Villa");
-            } else {
-                res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to update room type. Check provided data.");
-            }
+            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Room Type not found or failed to update");
         }
     }
 
@@ -315,8 +324,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Room ID");
             return;
         }
-
-        if (villaService.deleteRoomType(roomTypeId)) {
+        if (roomTypeDAO.deleteRoomType(roomTypeId)) {
             res.sendSuccess(HttpURLConnection.HTTP_OK, "Room Type deleted successfully");
         } else {
             res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Room Type not found or failed to delete");
@@ -329,8 +337,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Villa ID");
             return;
         }
-
-        if (villaService.deleteVilla(id)) {
+        if (villaDAO.deleteVilla(id)) {
             res.sendSuccess(HttpURLConnection.HTTP_OK, "Villa deleted successfully");
         } else {
             res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Villa not found or failed to delete");
Index: src/main/java/services/VillaService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package services;\r\n\r\nimport dao.BookingDAO;\r\nimport dao.ReviewDAO;\r\nimport dao.RoomTypeDAO;\r\nimport dao.VillaDAO;\r\nimport models.Booking;\r\nimport models.Review;\r\nimport models.RoomType;\r\nimport models.Villa;\r\n\r\nimport java.util.List;\r\n\r\npublic class VillaService {\r\n    private final VillaDAO villaDAO;\r\n    private final RoomTypeDAO roomTypeDAO;\r\n    private final BookingDAO bookingDAO;\r\n    private final ReviewDAO reviewDAO;\r\n\r\n    public VillaService(VillaDAO villaDAO, RoomTypeDAO roomTypeDAO, BookingDAO bookingDAO, ReviewDAO reviewDAO) {\r\n        this.villaDAO = villaDAO;\r\n        this.roomTypeDAO = roomTypeDAO;\r\n        this.bookingDAO = bookingDAO;\r\n        this.reviewDAO = reviewDAO;\r\n    }\r\n\r\n    public List<Villa> getAllVillas() {\r\n        return villaDAO.getAllVillas();\r\n    }\r\n\r\n    public Villa getVillaById(int id) {\r\n        return villaDAO.getVillaById(id);\r\n    }\r\n\r\n    public List<RoomType> getRoomTypesByVillaId(int villaId) {\r\n        return roomTypeDAO.getRoomTypesByVillaId(villaId);\r\n    }\r\n\r\n    public List<Booking> getBookingsByVillaId(int villaId) {\r\n        return bookingDAO.getBookingsByVillaId(villaId);\r\n    }\r\n\r\n    public List<Review> getReviewsByVillaId(int villaId) {\r\n        return reviewDAO.getReviewsByVillaId(villaId);\r\n    }\r\n\r\n    public List<Villa> searchVillasByAvailability(String checkinDate, String checkoutDate) {\r\n        if (checkinDate == null || checkinDate.isEmpty() || checkoutDate == null || checkoutDate.isEmpty()) {\r\n            System.err.println(\"Validation Error: Missing checkinDate or checkoutDate for availability search\");\r\n            return null;\r\n        }\r\n        return villaDAO.searchVillasByAvailability(checkinDate, checkoutDate);\r\n    }\r\n\r\n    public boolean addVilla(Villa villa) {\r\n        if (villa.getName() == null || villa.getName().isEmpty() ||\r\n                villa.getDescription() == null || villa.getDescription().isEmpty() ||\r\n                villa.getAddress() == null || villa.getAddress().isEmpty()) {\r\n            System.err.println(\"Validation Error: Missing required fields for Villa (name, description, address)\");\r\n            return false;\r\n        }\r\n        return villaDAO.addVilla(villa);\r\n    }\r\n\r\n    public boolean addRoomTypeToVilla(int villaId, RoomType roomType) {\r\n        if (roomType.getName() == null || roomType.getName().isEmpty() ||\r\n                roomType.getBedSize() == null || roomType.getBedSize().isEmpty() ||\r\n                roomType.getQuantity() <= 0 || roomType.getCapacity() <= 0 || roomType.getPrice() <= 0) {\r\n            System.err.println(\"Validation Error: Missing required string fields or invalid numeric values (<=0) for Room Type\");\r\n            return false;\r\n        }\r\n        roomType.setVillaId(villaId);\r\n        return roomTypeDAO.addRoomType(roomType);\r\n    }\r\n\r\n    public boolean updateVilla(Villa villa) {\r\n        if (villa.getName() == null || villa.getName().isEmpty() ||\r\n                villa.getDescription() == null || villa.getDescription().isEmpty() ||\r\n                villa.getAddress() == null || villa.getAddress().isEmpty()) {\r\n            System.err.println(\"Validation Error: Missing required fields for Villa update\");\r\n            return false;\r\n        }\r\n        return villaDAO.updateVilla(villa);\r\n    }\r\n\r\n    public boolean updateRoomTypeInVilla(RoomType roomType) {\r\n        if (roomType.getId() == -1 || roomType.getVillaId() == -1) {\r\n            System.err.println(\"Validation Error: Invalid Room ID or Villa ID for update\");\r\n            return false;\r\n        }\r\n        if (roomType.getName() == null || roomType.getName().isEmpty() ||\r\n                roomType.getBedSize() == null || roomType.getBedSize().isEmpty() ||\r\n                roomType.getQuantity() <= 0 || roomType.getCapacity() <= 0 || roomType.getPrice() <= 0) {\r\n            System.err.println(\"Validation Error: Missing required string fields or invalid numeric values (<=0) for Room Type update\");\r\n            return false;\r\n        }\r\n        return roomTypeDAO.updateRoomType(roomType);\r\n    }\r\n\r\n    public boolean deleteRoomType(int roomTypeId) {\r\n        return roomTypeDAO.deleteRoomType(roomTypeId);\r\n    }\r\n\r\n    public boolean deleteVilla(int id) {\r\n        return villaDAO.deleteVilla(id);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/services/VillaService.java b/src/main/java/services/VillaService.java
--- a/src/main/java/services/VillaService.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/services/VillaService.java	(date 1750821720617)
@@ -1,107 +1,4 @@
 package services;
 
-import dao.BookingDAO;
-import dao.ReviewDAO;
-import dao.RoomTypeDAO;
-import dao.VillaDAO;
-import models.Booking;
-import models.Review;
-import models.RoomType;
-import models.Villa;
-
-import java.util.List;
-
 public class VillaService {
-    private final VillaDAO villaDAO;
-    private final RoomTypeDAO roomTypeDAO;
-    private final BookingDAO bookingDAO;
-    private final ReviewDAO reviewDAO;
-
-    public VillaService(VillaDAO villaDAO, RoomTypeDAO roomTypeDAO, BookingDAO bookingDAO, ReviewDAO reviewDAO) {
-        this.villaDAO = villaDAO;
-        this.roomTypeDAO = roomTypeDAO;
-        this.bookingDAO = bookingDAO;
-        this.reviewDAO = reviewDAO;
-    }
-
-    public List<Villa> getAllVillas() {
-        return villaDAO.getAllVillas();
-    }
-
-    public Villa getVillaById(int id) {
-        return villaDAO.getVillaById(id);
-    }
-
-    public List<RoomType> getRoomTypesByVillaId(int villaId) {
-        return roomTypeDAO.getRoomTypesByVillaId(villaId);
-    }
-
-    public List<Booking> getBookingsByVillaId(int villaId) {
-        return bookingDAO.getBookingsByVillaId(villaId);
-    }
-
-    public List<Review> getReviewsByVillaId(int villaId) {
-        return reviewDAO.getReviewsByVillaId(villaId);
-    }
-
-    public List<Villa> searchVillasByAvailability(String checkinDate, String checkoutDate) {
-        if (checkinDate == null || checkinDate.isEmpty() || checkoutDate == null || checkoutDate.isEmpty()) {
-            System.err.println("Validation Error: Missing checkinDate or checkoutDate for availability search");
-            return null;
-        }
-        return villaDAO.searchVillasByAvailability(checkinDate, checkoutDate);
-    }
-
-    public boolean addVilla(Villa villa) {
-        if (villa.getName() == null || villa.getName().isEmpty() ||
-                villa.getDescription() == null || villa.getDescription().isEmpty() ||
-                villa.getAddress() == null || villa.getAddress().isEmpty()) {
-            System.err.println("Validation Error: Missing required fields for Villa (name, description, address)");
-            return false;
-        }
-        return villaDAO.addVilla(villa);
-    }
-
-    public boolean addRoomTypeToVilla(int villaId, RoomType roomType) {
-        if (roomType.getName() == null || roomType.getName().isEmpty() ||
-                roomType.getBedSize() == null || roomType.getBedSize().isEmpty() ||
-                roomType.getQuantity() <= 0 || roomType.getCapacity() <= 0 || roomType.getPrice() <= 0) {
-            System.err.println("Validation Error: Missing required string fields or invalid numeric values (<=0) for Room Type");
-            return false;
-        }
-        roomType.setVillaId(villaId);
-        return roomTypeDAO.addRoomType(roomType);
-    }
-
-    public boolean updateVilla(Villa villa) {
-        if (villa.getName() == null || villa.getName().isEmpty() ||
-                villa.getDescription() == null || villa.getDescription().isEmpty() ||
-                villa.getAddress() == null || villa.getAddress().isEmpty()) {
-            System.err.println("Validation Error: Missing required fields for Villa update");
-            return false;
-        }
-        return villaDAO.updateVilla(villa);
-    }
-
-    public boolean updateRoomTypeInVilla(RoomType roomType) {
-        if (roomType.getId() == -1 || roomType.getVillaId() == -1) {
-            System.err.println("Validation Error: Invalid Room ID or Villa ID for update");
-            return false;
-        }
-        if (roomType.getName() == null || roomType.getName().isEmpty() ||
-                roomType.getBedSize() == null || roomType.getBedSize().isEmpty() ||
-                roomType.getQuantity() <= 0 || roomType.getCapacity() <= 0 || roomType.getPrice() <= 0) {
-            System.err.println("Validation Error: Missing required string fields or invalid numeric values (<=0) for Room Type update");
-            return false;
-        }
-        return roomTypeDAO.updateRoomType(roomType);
-    }
-
-    public boolean deleteRoomType(int roomTypeId) {
-        return roomTypeDAO.deleteRoomType(roomTypeId);
-    }
-
-    public boolean deleteVilla(int id) {
-        return villaDAO.deleteVilla(id);
-    }
 }
Index: src/main/java/server/router/Router.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage server.router;\r\n\r\nimport com.sun.net.httpserver.HttpExchange;\r\nimport com.sun.net.httpserver.HttpHandler;\r\nimport dao.BookingDAO; // Import semua DAO\r\nimport dao.CustomerDAO;\r\nimport dao.ReviewDAO;\r\nimport dao.RoomTypeDAO;\r\nimport dao.VillaDAO;\r\nimport dao.VoucherDAO;\r\nimport server.Request;\r\nimport server.Response;\r\nimport server.handlers.CustomerHandler;\r\nimport server.handlers.VillaHandler;\r\nimport server.handlers.VoucherHandler;\r\nimport services.CustomerService; // Import semua Service\r\nimport services.VillaService;\r\nimport services.VoucherService;\r\n\r\nimport java.io.IOException;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URI;\r\nimport java.util.Map;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class Router implements HttpHandler {\r\n\r\n    private static final String API_KEY = \"PBO123\";\r\n\r\n    private final BookingDAO bookingDAO = new BookingDAO();\r\n    private final CustomerDAO customerDAO = new CustomerDAO();\r\n    private final ReviewDAO reviewDAO = new ReviewDAO();\r\n    private final RoomTypeDAO roomTypeDAO = new RoomTypeDAO();\r\n    private final VillaDAO villaDAO = new VillaDAO();\r\n    private final VoucherDAO voucherDAO = new VoucherDAO();\r\n\r\n    private final CustomerService customerService = new CustomerService(customerDAO, bookingDAO, reviewDAO);\r\n    private final VillaService villaService = new VillaService(villaDAO, roomTypeDAO, bookingDAO, reviewDAO);\r\n    private final VoucherService voucherService = new VoucherService(voucherDAO);\r\n\r\n    private final VillaHandler villaHandler = new VillaHandler(villaService);\r\n    private final CustomerHandler customerHandler = new CustomerHandler(customerService);\r\n    private final VoucherHandler voucherHandler = new VoucherHandler(voucherService);\r\n\r\n    @Override\r\n    public void handle(HttpExchange httpExchange) throws IOException {\r\n        Request req = new Request(httpExchange);\r\n        Response res = new Response(httpExchange);\r\n        URI uri = httpExchange.getRequestURI();\r\n        String path = uri.getPath();\r\n        String method = req.getRequestMethod();\r\n        String query = uri.getQuery();\r\n        System.out.printf(\"Received %s request for path: %s, query: %s\\n\", method, path, query);\r\n\r\n        try {\r\n            String providedApiKey = req.getHttpExchange().getRequestHeaders().getFirst(\"X-API-Key\");\r\n            if (providedApiKey == null || !providedApiKey.equals(API_KEY)) {\r\n                res.sendError(HttpURLConnection.HTTP_UNAUTHORIZED, \"Unauthorized: Invalid API Key\");\r\n                return;\r\n            }\r\n            if (path.startsWith(\"/villas\")) {\r\n                villaHandler.handle(httpExchange);\r\n            } else if (path.startsWith(\"/customers\")) {\r\n                customerHandler.handle(httpExchange);\r\n            } else if (path.startsWith(\"/vouchers\")) {\r\n                voucherHandler.handle(httpExchange);\r\n            } else if (path.equals(\"/\")) { // Handle root path\r\n                res.sendJson(HttpURLConnection.HTTP_OK, Map.of(\"message\", \"Welcome to the Villa Booking API! Available endpoints: /villas, /customers, /vouchers\"));\r\n            } else {\r\n                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error processing request: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            res.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR, \"Internal Server Error: \" + e.getMessage());\r\n        } finally {\r\n            if (!res.isSent()) {\r\n                httpExchange.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private int extractIdFromPath(String path, String regexPattern) {\r\n        Pattern pattern = Pattern.compile(regexPattern);\r\n        Matcher matcher = pattern.matcher(path);\r\n        if (matcher.find() && matcher.groupCount() >= 1) {\r\n            try {\r\n                return Integer.parseInt(matcher.group(1));\r\n            } catch (NumberFormatException e) {\r\n                return -1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    private Map<String, String> parseQueryParams(URI uri) {\r\n        String query = uri.getQuery();\r\n        if (query == null || query.isEmpty()) {\r\n            return Map.of();\r\n        }\r\n        return java.util.Arrays.stream(query.split(\"&\"))\r\n                .map(s -> s.split(\"=\"))\r\n                .filter(a -> a.length == 2)\r\n                .collect(java.util.stream.Collectors.toMap(a -> a[0], a -> a[1]));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/server/router/Router.java b/src/main/java/server/router/Router.java
--- a/src/main/java/server/router/Router.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/server/router/Router.java	(date 1750821722194)
@@ -3,20 +3,11 @@
 
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpHandler;
-import dao.BookingDAO; // Import semua DAO
-import dao.CustomerDAO;
-import dao.ReviewDAO;
-import dao.RoomTypeDAO;
-import dao.VillaDAO;
-import dao.VoucherDAO;
 import server.Request;
 import server.Response;
 import server.handlers.CustomerHandler;
 import server.handlers.VillaHandler;
 import server.handlers.VoucherHandler;
-import services.CustomerService; // Import semua Service
-import services.VillaService;
-import services.VoucherService;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -27,61 +18,76 @@
 
 public class Router implements HttpHandler {
 
-    private static final String API_KEY = "PBO123";
-
-    private final BookingDAO bookingDAO = new BookingDAO();
-    private final CustomerDAO customerDAO = new CustomerDAO();
-    private final ReviewDAO reviewDAO = new ReviewDAO();
-    private final RoomTypeDAO roomTypeDAO = new RoomTypeDAO();
-    private final VillaDAO villaDAO = new VillaDAO();
-    private final VoucherDAO voucherDAO = new VoucherDAO();
+    // API Key yang di-hardcode (dari dosen Anda)
+    private static final String API_KEY = "PBO123"; //
 
-    private final CustomerService customerService = new CustomerService(customerDAO, bookingDAO, reviewDAO);
-    private final VillaService villaService = new VillaService(villaDAO, roomTypeDAO, bookingDAO, reviewDAO);
-    private final VoucherService voucherService = new VoucherService(voucherDAO);
-
-    private final VillaHandler villaHandler = new VillaHandler(villaService);
-    private final CustomerHandler customerHandler = new CustomerHandler(customerService);
-    private final VoucherHandler voucherHandler = new VoucherHandler(voucherService);
+    // Instansiasi semua handler Anda di sini
+    private final VillaHandler villaHandler = new VillaHandler();
+    private final CustomerHandler customerHandler = new CustomerHandler();
+    private final VoucherHandler voucherHandler = new VoucherHandler();
+    // Jika Anda punya BookingHandler atau ReviewHandler terpisah (bukan nested di Villa/CustomerHandler),
+    // instansiasi juga di sini. Contoh:
+    // private final BookingHandler bookingHandler = new BookingHandler();
+    // private final ReviewHandler reviewHandler = new ReviewHandler();
 
     @Override
     public void handle(HttpExchange httpExchange) throws IOException {
         Request req = new Request(httpExchange);
         Response res = new Response(httpExchange);
+
         URI uri = httpExchange.getRequestURI();
         String path = uri.getPath();
         String method = req.getRequestMethod();
         String query = uri.getQuery();
+
         System.out.printf("Received %s request for path: %s, query: %s\n", method, path, query);
 
         try {
-            String providedApiKey = req.getHttpExchange().getRequestHeaders().getFirst("X-API-Key");
+            // Autentikasi API Key
+            String providedApiKey = req.getHttpExchange().getRequestHeaders()
+                    .getFirst("X-API-Key");
             if (providedApiKey == null || !providedApiKey.equals(API_KEY)) {
                 res.sendError(HttpURLConnection.HTTP_UNAUTHORIZED, "Unauthorized: Invalid API Key");
                 return;
             }
+
+            // --- Logic Routing ---
+            // Villa Endpoints
             if (path.startsWith("/villas")) {
-                villaHandler.handle(httpExchange);
-            } else if (path.startsWith("/customers")) {
-                customerHandler.handle(httpExchange);
-            } else if (path.startsWith("/vouchers")) {
-                voucherHandler.handle(httpExchange);
-            } else if (path.equals("/")) { // Handle root path
+                villaHandler.handle(httpExchange); // Delegasikan ke VillaHandler
+            }
+            // Customer Endpoints
+            else if (path.startsWith("/customers")) {
+                customerHandler.handle(httpExchange); // Delegasikan ke CustomerHandler
+            }
+            // Voucher Endpoints
+            else if (path.startsWith("/vouchers")) {
+                voucherHandler.handle(httpExchange); // Delegasikan ke VoucherHandler
+            }
+            // Handle root path
+            else if (path.equals("/")) {
                 res.sendJson(HttpURLConnection.HTTP_OK, Map.of("message", "Welcome to the Villa Booking API! Available endpoints: /villas, /customers, /vouchers"));
-            } else {
+            }
+            // Default handling for unmatched paths
+            else {
                 res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found");
             }
+
         } catch (Exception e) {
             System.err.println("Error processing request: " + e.getMessage());
             e.printStackTrace();
             res.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR, "Internal Server Error: " + e.getMessage());
         } finally {
+            // httpExchange.close() sudah dihandle di Response.send() dan sendError/sendJson
+            // Pastikan tidak ada resource yang bocor jika respons belum terkirim karena suatu error
             if (!res.isSent()) {
                 httpExchange.close();
             }
         }
     }
 
+    // Utility methods (bisa dipindahkan ke Request/Response atau kelas util terpisah jika lebih sering dipakai)
+    // Untuk saat ini, bisa diletakkan di sini atau di masing-masing handler jika spesifik
     private int extractIdFromPath(String path, String regexPattern) {
         Pattern pattern = Pattern.compile(regexPattern);
         Matcher matcher = pattern.matcher(path);
@@ -105,4 +111,4 @@
                 .filter(a -> a.length == 2)
                 .collect(java.util.stream.Collectors.toMap(a -> a[0], a -> a[1]));
     }
-}
+}
\ No newline at end of file
Index: src/main/java/services/CustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package services;\r\n\r\nimport dao.BookingDAO;\r\nimport dao.CustomerDAO;\r\nimport dao.ReviewDAO;\r\nimport models.Booking;\r\nimport models.Customer;\r\nimport models.Review;\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.List;\r\n\r\npublic class CustomerService {\r\n    private final CustomerDAO customerDAO;\r\n    private final BookingDAO bookingDAO;\r\n    private final ReviewDAO reviewDAO;\r\n\r\n    public CustomerService(CustomerDAO customerDAO, BookingDAO bookingDAO, ReviewDAO reviewDAO) {\r\n        this.customerDAO = customerDAO;\r\n        this.bookingDAO = bookingDAO;\r\n        this.reviewDAO = reviewDAO;\r\n    }\r\n\r\n    public List<Customer> getAllCustomers() {\r\n        return customerDAO.getAllCustomers();\r\n    }\r\n\r\n    public Customer getCustomerById(int id) {\r\n        return customerDAO.getCustomerById(id);\r\n    }\r\n\r\n    public List<Booking> getBookingsByCustomerId(int customerId) {\r\n        return bookingDAO.getBookingsByCustomerId(customerId);\r\n    }\r\n\r\n    public List<Review> getReviewsByCustomerId(int customerId) {\r\n        return reviewDAO.getReviewsByCustomerId(customerId);\r\n    }\r\n\r\n    public boolean addCustomer(Customer customer) {\r\n        if (customer.getName() == null || customer.getName().isEmpty() ||\r\n                customer.getEmail() == null || customer.getEmail().isEmpty() ||\r\n                customer.getPhone() == null || customer.getPhone().isEmpty()) {\r\n            System.err.println(\"Validation Error: Missing required fields (name, email, phone)\");\r\n            return false;\r\n        }\r\n        if (!customer.getEmail().matches(\"^[\\\\w!#$%&'*+/=?`{|}~^-]+(?:\\\\.[\\\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,6}$\")) {\r\n            System.err.println(\"Validation Error: Invalid email format\");\r\n            return false;\r\n        }\r\n        if (!customer.getPhone().matches(\"^\\\\+?[0-9\\\\s\\\\-]+$\")) {\r\n            System.err.println(\"Validation Error: Invalid phone number format\");\r\n            return false;\r\n        }\r\n        return customerDAO.addCustomer(customer);\r\n    }\r\n\r\n    public boolean updateCustomer(Customer customer) {\r\n        if (customer.getName() == null || customer.getName().isEmpty() ||\r\n                customer.getEmail() == null || customer.getEmail().isEmpty() ||\r\n                customer.getPhone() == null || customer.getPhone().isEmpty()) {\r\n            System.err.println(\"Validation Error: Missing required fields for Customer update\");\r\n            return false;\r\n        }\r\n        if (!customer.getEmail().matches(\"^[\\\\w!#$%&'*+/=?`{|}~^-]+(?:\\\\.[\\\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,6}$\")) {\r\n            System.err.println(\"Validation Error: Invalid email format\");\r\n            return false;\r\n        }\r\n        if (!customer.getPhone().matches(\"^\\\\+?[0-9\\\\s\\\\-]+$\")) {\r\n            System.err.println(\"Validation Error: Invalid phone number format\");\r\n            return false;\r\n        }\r\n        return customerDAO.updateCustomer(customer);\r\n    }\r\n\r\n    public boolean deleteCustomer(int id) {\r\n        return customerDAO.deleteCustomer(id);\r\n    }\r\n\r\n    public boolean addBookingForCustomer(int customerId, Booking booking) {\r\n        if (booking.getCheckinDate() == null || booking.getCheckinDate().isEmpty() ||\r\n                booking.getCheckoutDate() == null || booking.getCheckoutDate().isEmpty() ||\r\n                booking.getPaymentStatus() == null || booking.getPaymentStatus().isEmpty()) {\r\n            System.err.println(\"Validation Error: Missing required string fields for Booking\");\r\n            return false;\r\n        }\r\n        if (booking.getRoomTypeId() <= 0 || booking.getPrice() <= 0 || booking.getFinalPrice() <= 0) {\r\n            System.err.println(\"Validation Error: roomTypeId, price, or finalPrice must be positive for Booking\");\r\n            return false;\r\n        }\r\n\r\n        booking.setCustomerId(customerId);\r\n        return bookingDAO.addBooking(booking);\r\n    }\r\n\r\n    public boolean addReviewForBooking(int bookingId, Review review) {\r\n        if (review.getTitle() == null || review.getTitle().isEmpty() ||\r\n                review.getContent() == null || review.getContent().isEmpty()) {\r\n            System.err.println(\"Validation Error: Missing required string fields for Review\");\r\n            return false;\r\n        }\r\n        if (review.getStar() < 1 || review.getStar() > 5) {\r\n            System.err.println(\"Validation Error: Star rating must be between 1 and 5\");\r\n            return false;\r\n        }\r\n        review.setBookingId(bookingId);\r\n        return reviewDAO.addReview(review);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/services/CustomerService.java b/src/main/java/services/CustomerService.java
--- a/src/main/java/services/CustomerService.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/services/CustomerService.java	(date 1750821722210)
@@ -15,6 +15,7 @@
     private final BookingDAO bookingDAO;
     private final ReviewDAO reviewDAO;
 
+    // Konstruktor untuk menginject DAO
     public CustomerService(CustomerDAO customerDAO, BookingDAO bookingDAO, ReviewDAO reviewDAO) {
         this.customerDAO = customerDAO;
         this.bookingDAO = bookingDAO;
@@ -38,6 +39,7 @@
     }
 
     public boolean addCustomer(Customer customer) {
+        // Logika bisnis dan validasi untuk menambahkan pelanggan
         if (customer.getName() == null || customer.getName().isEmpty() ||
                 customer.getEmail() == null || customer.getEmail().isEmpty() ||
                 customer.getPhone() == null || customer.getPhone().isEmpty()) {
@@ -56,6 +58,7 @@
     }
 
     public boolean updateCustomer(Customer customer) {
+        // Logika bisnis dan validasi untuk memperbarui pelanggan
         if (customer.getName() == null || customer.getName().isEmpty() ||
                 customer.getEmail() == null || customer.getEmail().isEmpty() ||
                 customer.getPhone() == null || customer.getPhone().isEmpty()) {
@@ -78,12 +81,16 @@
     }
 
     public boolean addBookingForCustomer(int customerId, Booking booking) {
+        // Validasi dan logika bisnis untuk penambahan booking
+        // Hapus pemeriksaan `== null` untuk tipe primitif (roomTypeId, price, finalPrice, hasCheckedIn, hasCheckedOut)
         if (booking.getCheckinDate() == null || booking.getCheckinDate().isEmpty() ||
                 booking.getCheckoutDate() == null || booking.getCheckoutDate().isEmpty() ||
                 booking.getPaymentStatus() == null || booking.getPaymentStatus().isEmpty()) {
             System.err.println("Validation Error: Missing required string fields for Booking");
             return false;
         }
+        // Jika roomTypeId, price, finalPrice diharapkan memiliki nilai > 0 atau tidak sama dengan nilai "kosong" tertentu,
+        // lakukan validasi numerik, bukan null check.
         if (booking.getRoomTypeId() <= 0 || booking.getPrice() <= 0 || booking.getFinalPrice() <= 0) {
             System.err.println("Validation Error: roomTypeId, price, or finalPrice must be positive for Booking");
             return false;
@@ -94,6 +101,8 @@
     }
 
     public boolean addReviewForBooking(int bookingId, Review review) {
+        // Validasi dan logika bisnis untuk penambahan review
+        // Hapus pemeriksaan `== null` untuk tipe primitif (star)
         if (review.getTitle() == null || review.getTitle().isEmpty() ||
                 review.getContent() == null || review.getContent().isEmpty()) {
             System.err.println("Validation Error: Missing required string fields for Review");
@@ -106,5 +115,4 @@
         review.setBookingId(bookingId);
         return reviewDAO.addReview(review);
     }
-}
-
+}
\ No newline at end of file
Index: src/main/java/services/VoucherService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package services;\r\n\r\nimport dao.VoucherDAO;\r\nimport models.Voucher;\r\n\r\nimport java.util.List;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class VoucherService {\r\n  private final VoucherDAO voucherDAO;\r\n\r\n  public VoucherService(VoucherDAO voucherDAO) {\r\n    this.voucherDAO = voucherDAO;\r\n  }\r\n\r\n  public List<Voucher> getAllVouchers() {\r\n    return voucherDAO.getAllVouchers();\r\n  }\r\n\r\n  public Voucher getVoucherById(int id) {\r\n    return voucherDAO.getVoucherById(id);\r\n  }\r\n\r\n  public boolean addVoucher(Voucher voucher) {\r\n    if (voucher.getCode() == null || voucher.getCode().isEmpty() ||\r\n            voucher.getDescription() == null || voucher.getDescription().isEmpty() ||\r\n            voucher.getStartDate() == null || voucher.getStartDate().isEmpty() ||\r\n            voucher.getEndDate() == null || voucher.getEndDate().isEmpty() ||\r\n            voucher.getDiscount() < 0) {\r\n      System.err.println(\"Validation Error: Missing required fields for Voucher or invalid discount value.\");\r\n      return false;\r\n    }\r\n\r\n    Pattern dateFormat = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}\");\r\n    if (!dateFormat.matcher(voucher.getStartDate()).matches() || !dateFormat.matcher(voucher.getEndDate()).matches()) {\r\n      System.err.println(\"Validation Error: Invalid date format. Use YYYY-MM-DD hh:mm:ss\");\r\n      return false;\r\n    }\r\n\r\n    return voucherDAO.addVoucher(voucher);\r\n  }\r\n\r\n  public boolean updateVoucher(Voucher voucher) {\r\n    if (voucher.getCode() == null || voucher.getCode().isEmpty() ||\r\n            voucher.getDescription() == null || voucher.getDescription().isEmpty() ||\r\n            voucher.getStartDate() == null || voucher.getStartDate().isEmpty() ||\r\n            voucher.getEndDate() == null || voucher.getEndDate().isEmpty() ||\r\n            voucher.getDiscount() < 0) {\r\n      System.err.println(\"Validation Error: Missing required fields for Voucher update or invalid discount value.\");\r\n      return false;\r\n    }\r\n\r\n    Pattern dateFormat = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}\");\r\n    if (!dateFormat.matcher(voucher.getStartDate()).matches() || !dateFormat.matcher(voucher.getEndDate()).matches()) {\r\n      System.err.println(\"Validation Error: Invalid date format. Use YYYY-MM-DD hh:mm:ss\");\r\n      return false;\r\n    }\r\n\r\n    return voucherDAO.updateVoucher(voucher);\r\n  }\r\n\r\n  public boolean deleteVoucher(int id) {\r\n    return voucherDAO.deleteVoucher(id);\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/services/VoucherService.java b/src/main/java/services/VoucherService.java
--- a/src/main/java/services/VoucherService.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/services/VoucherService.java	(date 1750821722214)
@@ -7,60 +7,63 @@
 import java.util.regex.Pattern;
 
 public class VoucherService {
-  private final VoucherDAO voucherDAO;
+    private final VoucherDAO voucherDAO;
 
-  public VoucherService(VoucherDAO voucherDAO) {
-    this.voucherDAO = voucherDAO;
-  }
+    public VoucherService(VoucherDAO voucherDAO) {
+        this.voucherDAO = voucherDAO;
+    }
 
-  public List<Voucher> getAllVouchers() {
-    return voucherDAO.getAllVouchers();
-  }
+    public List<Voucher> getAllVouchers() {
+        return voucherDAO.getAllVouchers();
+    }
 
-  public Voucher getVoucherById(int id) {
-    return voucherDAO.getVoucherById(id);
-  }
+    public Voucher getVoucherById(int id) {
+        return voucherDAO.getVoucherById(id);
+    }
 
-  public boolean addVoucher(Voucher voucher) {
-    if (voucher.getCode() == null || voucher.getCode().isEmpty() ||
-            voucher.getDescription() == null || voucher.getDescription().isEmpty() ||
-            voucher.getStartDate() == null || voucher.getStartDate().isEmpty() ||
-            voucher.getEndDate() == null || voucher.getEndDate().isEmpty() ||
-            voucher.getDiscount() < 0) {
-      System.err.println("Validation Error: Missing required fields for Voucher or invalid discount value.");
-      return false;
-    }
+    public boolean addVoucher(Voucher voucher) {
+        if (voucher.getCode() == null || voucher.getCode().isEmpty() ||
+                voucher.getDescription() == null || voucher.getDescription().isEmpty() ||
+                voucher.getStartDate() == null || voucher.getStartDate().isEmpty() ||
+                voucher.getEndDate() == null || voucher.getEndDate().isEmpty() ||
+                voucher.getDiscount() < 0) { // Perbaikan: Cek nilai diskon yang valid, bukan null
+            System.err.println("Validation Error: Missing required fields for Voucher or invalid discount value.");
+            return false;
+        }
 
-    Pattern dateFormat = Pattern.compile("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}");
-    if (!dateFormat.matcher(voucher.getStartDate()).matches() || !dateFormat.matcher(voucher.getEndDate()).matches()) {
-      System.err.println("Validation Error: Invalid date format. Use YYYY-MM-DD hh:mm:ss");
-      return false;
-    }
+        // Pindahkan validasi format tanggal ke dalam metode
+        Pattern dateFormat = Pattern.compile("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}");
+        if (!dateFormat.matcher(voucher.getStartDate()).matches() || !dateFormat.matcher(voucher.getEndDate()).matches()) {
+            System.err.println("Validation Error: Invalid date format. Use YYYY-MM-DD hh:mm:ss");
+            return false;
+        }
 
-    return voucherDAO.addVoucher(voucher);
-  }
+        // Panggil DAO setelah semua validasi berhasil
+        return voucherDAO.addVoucher(voucher);
+    }
 
-  public boolean updateVoucher(Voucher voucher) {
-    if (voucher.getCode() == null || voucher.getCode().isEmpty() ||
-            voucher.getDescription() == null || voucher.getDescription().isEmpty() ||
-            voucher.getStartDate() == null || voucher.getStartDate().isEmpty() ||
-            voucher.getEndDate() == null || voucher.getEndDate().isEmpty() ||
-            voucher.getDiscount() < 0) {
-      System.err.println("Validation Error: Missing required fields for Voucher update or invalid discount value.");
-      return false;
-    }
+    public boolean updateVoucher(Voucher voucher) {
+        if (voucher.getCode() == null || voucher.getCode().isEmpty() ||
+                voucher.getDescription() == null || voucher.getDescription().isEmpty() ||
+                voucher.getStartDate() == null || voucher.getStartDate().isEmpty() ||
+                voucher.getEndDate() == null || voucher.getEndDate().isEmpty() ||
+                voucher.getDiscount() < 0) { // Perbaikan: Cek nilai diskon yang valid, bukan null
+            System.err.println("Validation Error: Missing required fields for Voucher update or invalid discount value.");
+            return false;
+        }
 
-    Pattern dateFormat = Pattern.compile("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}");
-    if (!dateFormat.matcher(voucher.getStartDate()).matches() || !dateFormat.matcher(voucher.getEndDate()).matches()) {
-      System.err.println("Validation Error: Invalid date format. Use YYYY-MM-DD hh:mm:ss");
-      return false;
-    }
+        // Pindahkan validasi format tanggal ke dalam metode
+        Pattern dateFormat = Pattern.compile("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}");
+        if (!dateFormat.matcher(voucher.getStartDate()).matches() || !dateFormat.matcher(voucher.getEndDate()).matches()) {
+            System.err.println("Validation Error: Invalid date format. Use YYYY-MM-DD hh:mm:ss");
+            return false;
+        }
 
-    return voucherDAO.updateVoucher(voucher);
-  }
+        // Panggil DAO setelah semua validasi berhasil
+        return voucherDAO.updateVoucher(voucher);
+    }
 
-  public boolean deleteVoucher(int id) {
-    return voucherDAO.deleteVoucher(id);
-  }
-}
-
+    public boolean deleteVoucher(int id) {
+        return voucherDAO.deleteVoucher(id);
+    }
+}
\ No newline at end of file
Index: src/main/java/server/handlers/CustomerHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package server.handlers;\r\n\r\nimport com.sun.net.httpserver.HttpExchange;\r\nimport com.sun.net.httpserver.HttpHandler;\r\nimport models.Booking;\r\nimport models.Customer;\r\nimport models.Review;\r\nimport server.Request;\r\nimport server.Response;\r\nimport services.CustomerService; // Import service baru\r\n\r\nimport java.io.IOException;\r\nimport java.net.HttpURLConnection;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class CustomerHandler implements HttpHandler {\r\n\r\n    private final CustomerService customerService;\r\n\r\n    public CustomerHandler(CustomerService customerService) {\r\n        this.customerService = customerService;\r\n    }\r\n\r\n    private int extractIdFromPath(String path, String regexPattern) {\r\n        Pattern pattern = Pattern.compile(regexPattern);\r\n        Matcher matcher = pattern.matcher(path);\r\n        if (matcher.find() && matcher.groupCount() >= 1) {\r\n            try {\r\n                return Integer.parseInt(matcher.group(1));\r\n            } catch (NumberFormatException e) {\r\n                return -1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public void handle(HttpExchange httpExchange) throws IOException {\r\n        Request req = new Request(httpExchange);\r\n        Response res = new Response(httpExchange);\r\n        String path = httpExchange.getRequestURI().getPath();\r\n        String method = req.getRequestMethod();\r\n\r\n        try {\r\n            if (\"GET\".equals(method)) {\r\n                if (path.equals(\"/customers\")) {\r\n                    handleGetAllCustomers(res);\r\n                } else if (path.matches(\"/customers/\\\\d+\")) {\r\n                    handleGetCustomerById(req, res);\r\n                } else if (path.matches(\"/customers/\\\\d+/bookings\")) {\r\n                    handleGetBookingsByCustomerId(req, res);\r\n                } else if (path.matches(\"/customers/\\\\d+/reviews\")) {\r\n                    handleGetReviewsByCustomerId(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for GET on Customer\");\r\n                }\r\n            } else if (\"POST\".equals(method)) {\r\n                if (path.equals(\"/customers\")) {\r\n                    handleAddCustomer(req, res);\r\n                } else if (path.matches(\"/customers/\\\\d+/bookings\")) {\r\n                    handleAddBookingForCustomer(req, res);\r\n                } else if (path.matches(\"/customers/\\\\d+/bookings/\\\\d+/reviews\")) {\r\n                    handleAddReviewForBooking(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for POST on Customer\");\r\n                }\r\n            } else if (\"PUT\".equals(method)) {\r\n                if (path.matches(\"/customers/\\\\d+\")) {\r\n                    handleUpdateCustomer(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for PUT on Customer\");\r\n                }\r\n            } else if (\"DELETE\".equals(method)) {\r\n                if (path.matches(\"/customers/\\\\d+\")) {\r\n                    handleDeleteCustomer(req, res);\r\n                } else {\r\n                    res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Endpoint not found for DELETE on Customer\");\r\n                }\r\n            } else {\r\n                res.sendError(405, \"Method Not Allowed\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error in CustomerHandler: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            res.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR, \"Internal Server Error: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void handleGetAllCustomers(Response res) throws IOException {\r\n        List<Customer> customers = customerService.getAllCustomers();\r\n        res.sendJson(HttpURLConnection.HTTP_OK, customers);\r\n    }\r\n\r\n    private void handleGetCustomerById(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/customers/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Customer ID\");\r\n            return;\r\n        }\r\n        Customer customer = customerService.getCustomerById(id);\r\n        if (customer != null) {\r\n            res.sendJson(HttpURLConnection.HTTP_OK, customer);\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Customer not found\");\r\n        }\r\n    }\r\n\r\n    private void handleGetBookingsByCustomerId(Request req, Response res) throws IOException {\r\n        int customerId = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/customers/(\\\\d+)/bookings\");\r\n        if (customerId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Customer ID\");\r\n            return;\r\n        }\r\n        List<Booking> bookings = customerService.getBookingsByCustomerId(customerId);\r\n        res.sendJson(HttpURLConnection.HTTP_OK, bookings);\r\n    }\r\n\r\n    private void handleGetReviewsByCustomerId(Request req, Response res) throws IOException {\r\n        int customerId = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/customers/(\\\\d+)/reviews\");\r\n        if (customerId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Customer ID\");\r\n            return;\r\n        }\r\n        List<Review> reviews = customerService.getReviewsByCustomerId(customerId);\r\n        res.sendJson(HttpURLConnection.HTTP_OK, reviews);\r\n    }\r\n\r\n    private void handleAddCustomer(Request req, Response res) throws IOException {\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        String name = (String) reqJsonMap.get(\"name\");\r\n        String email = (String) reqJsonMap.get(\"email\");\r\n        String phone = (String) reqJsonMap.get(\"phone\");\r\n\r\n        Customer newCustomer = new Customer(0, name, email, phone);\r\n\r\n        if (customerService.addCustomer(newCustomer)) { // Memanggil service\r\n            res.sendSuccess(HttpURLConnection.HTTP_CREATED, \"Customer added successfully\");\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to add customer. Check provided data.\");\r\n        }\r\n    }\r\n\r\n    private void handleAddBookingForCustomer(Request req, Response res) throws IOException {\r\n        int customerId = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/customers/(\\\\d+)/bookings\");\r\n        if (customerId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Customer ID\");\r\n            return;\r\n        }\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        Integer roomTypeId = (Integer) reqJsonMap.get(\"roomTypeId\");\r\n        String checkinDate = (String) reqJsonMap.get(\"checkinDate\");\r\n        String checkoutDate = (String) reqJsonMap.get(\"checkoutDate\");\r\n        Integer price = (Integer) reqJsonMap.get(\"price\");\r\n        Integer voucherId = (Integer) reqJsonMap.get(\"voucherId\");\r\n        Integer finalPrice = (Integer) reqJsonMap.get(\"finalPrice\");\r\n        String paymentStatus = (String) reqJsonMap.get(\"paymentStatus\");\r\n        Boolean hasCheckedIn = (Boolean) reqJsonMap.get(\"hasCheckedIn\");\r\n        Boolean hasCheckedOut = (Boolean) reqJsonMap.get(\"hasCheckedOut\");\r\n\r\n        Booking newBooking = new Booking(\r\n                0, customerId, roomTypeId, checkinDate, checkoutDate,\r\n                price, voucherId, finalPrice, paymentStatus,\r\n                hasCheckedIn != null && hasCheckedIn ? 1 : 0, hasCheckedOut != null && hasCheckedOut ? 1 : 0\r\n        );\r\n\r\n        if (customerService.addBookingForCustomer(customerId, newBooking)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_CREATED, \"Booking added successfully for customer \" + customerId);\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to add booking or invalid data. Check required fields.\");\r\n        }\r\n    }\r\n\r\n    private void handleAddReviewForBooking(Request req, Response res) throws IOException {\r\n        Pattern pattern = Pattern.compile(\"/customers/\\\\d+/bookings/(\\\\d+)/reviews\");\r\n        Matcher matcher = pattern.matcher(req.getHttpExchange().getRequestURI().getPath());\r\n\r\n        int bookingId = -1;\r\n        if (matcher.find() && matcher.groupCount() == 1) {\r\n            bookingId = Integer.parseInt(matcher.group(1));\r\n        }\r\n\r\n        if (bookingId == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Booking ID in path\");\r\n            return;\r\n        }\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        Integer star = (Integer) reqJsonMap.get(\"star\");\r\n        String title = (String) reqJsonMap.get(\"title\");\r\n        String content = (String) reqJsonMap.get(\"content\");\r\n\r\n        Review newReview = new Review(bookingId, star, title, content);\r\n\r\n        if (customerService.addReviewForBooking(bookingId, newReview)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_CREATED, \"Review added successfully for booking \" + bookingId);\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to add review or invalid data. Check required fields and star rating.\");\r\n        }\r\n    }\r\n\r\n\r\n    private void handleUpdateCustomer(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/customers/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Customer ID\");\r\n            return;\r\n        }\r\n        Map<String, Object> reqJsonMap = req.getJSON();\r\n        String name = (String) reqJsonMap.get(\"name\");\r\n        String email = (String) reqJsonMap.get(\"email\");\r\n        String phone = (String) reqJsonMap.get(\"phone\");\r\n\r\n        Customer updatedCustomer = new Customer(id, name, email, phone);\r\n\r\n        if (customerService.updateCustomer(updatedCustomer)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_OK, \"Customer updated successfully\");\r\n        } else {\r\n            if (customerService.getCustomerById(id) == null) {\r\n                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Customer not found\");\r\n            } else {\r\n                res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Failed to update customer. Check provided data.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void handleDeleteCustomer(Request req, Response res) throws IOException {\r\n        int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), \"/customers/(\\\\d+)\");\r\n        if (id == -1) {\r\n            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, \"Invalid Customer ID\");\r\n            return;\r\n        }\r\n\r\n        if (customerService.deleteCustomer(id)) {\r\n            res.sendSuccess(HttpURLConnection.HTTP_OK, \"Customer deleted successfully\");\r\n        } else {\r\n            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, \"Customer not found or failed to delete\");\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/server/handlers/CustomerHandler.java b/src/main/java/server/handlers/CustomerHandler.java
--- a/src/main/java/server/handlers/CustomerHandler.java	(revision ed7b0e9ec5ca086f00d72cd71dca3c19ea514834)
+++ b/src/main/java/server/handlers/CustomerHandler.java	(date 1750821723504)
@@ -2,12 +2,14 @@
 
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpHandler;
+import dao.BookingDAO;
+import dao.CustomerDAO;
+import dao.ReviewDAO;
 import models.Booking;
 import models.Customer;
 import models.Review;
 import server.Request;
 import server.Response;
-import services.CustomerService; // Import service baru
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -17,16 +19,14 @@
 import java.util.regex.Pattern;
 
 public class CustomerHandler implements HttpHandler {
-
-    private final CustomerService customerService;
-
-    public CustomerHandler(CustomerService customerService) {
-        this.customerService = customerService;
-    }
+    private final CustomerDAO customerDAO = new CustomerDAO();
+    private final BookingDAO bookingDAO = new BookingDAO();
+    private final ReviewDAO reviewDAO = new ReviewDAO();
 
     private int extractIdFromPath(String path, String regexPattern) {
         Pattern pattern = Pattern.compile(regexPattern);
         Matcher matcher = pattern.matcher(path);
+
         if (matcher.find() && matcher.groupCount() >= 1) {
             try {
                 return Integer.parseInt(matcher.group(1));
@@ -46,35 +46,35 @@
 
         try {
             if ("GET".equals(method)) {
-                if (path.equals("/customers")) {
+                if (path.equals("/customers")) { // GET /customers
                     handleGetAllCustomers(res);
-                } else if (path.matches("/customers/\\d+")) {
+                } else if (path.matches("/customers/\\d+")) { // GET /customers/{id}
                     handleGetCustomerById(req, res);
-                } else if (path.matches("/customers/\\d+/bookings")) {
+                } else if (path.matches("/customers/\\d+/bookings")) { // GET /customers/{id}/bookings
                     handleGetBookingsByCustomerId(req, res);
-                } else if (path.matches("/customers/\\d+/reviews")) {
+                } else if (path.matches("/customers/\\d+/reviews")) { // GET /customers/{id}/reviews
                     handleGetReviewsByCustomerId(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for GET on Customer");
                 }
             } else if ("POST".equals(method)) {
-                if (path.equals("/customers")) {
+                if (path.equals("/customers")) { // POST /customers
                     handleAddCustomer(req, res);
-                } else if (path.matches("/customers/\\d+/bookings")) {
+                } else if (path.matches("/customers/\\d+/bookings")) { // POST /customers/{id}/bookings
                     handleAddBookingForCustomer(req, res);
-                } else if (path.matches("/customers/\\d+/bookings/\\d+/reviews")) {
+                } else if (path.matches("/customers/\\d+/bookings/\\d+/reviews")) { // POST /customers/{id}/bookings/{id}/reviews
                     handleAddReviewForBooking(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for POST on Customer");
                 }
             } else if ("PUT".equals(method)) {
-                if (path.matches("/customers/\\d+")) {
+                if (path.matches("/customers/\\d+")) { // PUT /customers/{id}
                     handleUpdateCustomer(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for PUT on Customer");
                 }
             } else if ("DELETE".equals(method)) {
-                if (path.matches("/customers/\\d+")) {
+                if (path.matches("/customers/\\d+")) { // DELETE /customers/{id}
                     handleDeleteCustomer(req, res);
                 } else {
                     res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Endpoint not found for DELETE on Customer");
@@ -90,7 +90,7 @@
     }
 
     private void handleGetAllCustomers(Response res) throws IOException {
-        List<Customer> customers = customerService.getAllCustomers();
+        List<Customer> customers = customerDAO.getAllCustomers();
         res.sendJson(HttpURLConnection.HTTP_OK, customers);
     }
 
@@ -100,7 +100,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Customer ID");
             return;
         }
-        Customer customer = customerService.getCustomerById(id);
+        Customer customer = customerDAO.getCustomerById(id);
         if (customer != null) {
             res.sendJson(HttpURLConnection.HTTP_OK, customer);
         } else {
@@ -114,7 +114,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Customer ID");
             return;
         }
-        List<Booking> bookings = customerService.getBookingsByCustomerId(customerId);
+        List<Booking> bookings = bookingDAO.getBookingsByCustomerId(customerId);
         res.sendJson(HttpURLConnection.HTTP_OK, bookings);
     }
 
@@ -124,7 +124,7 @@
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Customer ID");
             return;
         }
-        List<Review> reviews = customerService.getReviewsByCustomerId(customerId);
+        List<Review> reviews = reviewDAO.getReviewsByCustomerId(customerId);
         res.sendJson(HttpURLConnection.HTTP_OK, reviews);
     }
 
@@ -134,12 +134,28 @@
         String email = (String) reqJsonMap.get("email");
         String phone = (String) reqJsonMap.get("phone");
 
+        if (name == null || name.isEmpty() || email == null || email.isEmpty() || phone == null || phone.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields (name, email, phone)");
+            return;
+        }
+
+        // Basic email validation
+        if (!email.matches("^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$")) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid email format");
+            return;
+        }
+
+        // Basic phone number validation (e.g., starts with +, then digits)
+        if (!phone.matches("^\\+?[0-9\\s\\-]+$")) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid phone number format");
+            return;
+        }
         Customer newCustomer = new Customer(0, name, email, phone);
 
-        if (customerService.addCustomer(newCustomer)) { // Memanggil service
+        if (customerDAO.addCustomer(newCustomer)) {
             res.sendSuccess(HttpURLConnection.HTTP_CREATED, "Customer added successfully");
         } else {
-            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add customer. Check provided data.");
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add customer or invalid data");
         }
     }
 
@@ -160,16 +176,21 @@
         Boolean hasCheckedIn = (Boolean) reqJsonMap.get("hasCheckedIn");
         Boolean hasCheckedOut = (Boolean) reqJsonMap.get("hasCheckedOut");
 
+        if (roomTypeId == null || checkinDate == null || checkinDate.isEmpty() || checkoutDate == null || checkoutDate.isEmpty() ||
+                price == null || finalPrice == null || paymentStatus == null || paymentStatus.isEmpty() || hasCheckedIn == null || hasCheckedOut == null) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields for Booking");
+            return;
+        }
         Booking newBooking = new Booking(
                 0, customerId, roomTypeId, checkinDate, checkoutDate,
                 price, voucherId, finalPrice, paymentStatus,
-                hasCheckedIn != null && hasCheckedIn ? 1 : 0, hasCheckedOut != null && hasCheckedOut ? 1 : 0
+                hasCheckedIn ? 1 : 0, hasCheckedOut ? 1 : 0
         );
 
-        if (customerService.addBookingForCustomer(customerId, newBooking)) {
+        if (bookingDAO.addBooking(newBooking)) {
             res.sendSuccess(HttpURLConnection.HTTP_CREATED, "Booking added successfully for customer " + customerId);
         } else {
-            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add booking or invalid data. Check required fields.");
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add booking or invalid data");
         }
     }
 
@@ -191,15 +212,23 @@
         String title = (String) reqJsonMap.get("title");
         String content = (String) reqJsonMap.get("content");
 
+        if (star == null || title == null || title.isEmpty() || content == null || content.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields for Review");
+            return;
+        }
+
+        if (star < 1 || star > 5) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Star rating must be between 1 and 5");
+            return;
+        }
         Review newReview = new Review(bookingId, star, title, content);
 
-        if (customerService.addReviewForBooking(bookingId, newReview)) {
+        if (reviewDAO.addReview(newReview)) {
             res.sendSuccess(HttpURLConnection.HTTP_CREATED, "Review added successfully for booking " + bookingId);
         } else {
-            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add review or invalid data. Check required fields and star rating.");
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to add review or invalid data");
         }
     }
-
 
     private void handleUpdateCustomer(Request req, Response res) throws IOException {
         int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), "/customers/(\\d+)");
@@ -212,31 +241,41 @@
         String email = (String) reqJsonMap.get("email");
         String phone = (String) reqJsonMap.get("phone");
 
+        if (name == null || name.isEmpty() || email == null || email.isEmpty() || phone == null || phone.isEmpty()) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Missing required fields for Customer update");
+            return;
+        }
+
+        if (!email.matches("^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$")) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid email format");
+            return;
+        }
+
+        if (!phone.matches("^\\+?[0-9\\s\\-]+$")) {
+            res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid phone number format");
+            return;
+        }
         Customer updatedCustomer = new Customer(id, name, email, phone);
 
-        if (customerService.updateCustomer(updatedCustomer)) {
+        if (customerDAO.updateCustomer(updatedCustomer)) {
             res.sendSuccess(HttpURLConnection.HTTP_OK, "Customer updated successfully");
         } else {
-            if (customerService.getCustomerById(id) == null) {
-                res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Customer not found");
-            } else {
-                res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Failed to update customer. Check provided data.");
-            }
+            res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Customer not found or failed to update");
         }
     }
 
     private void handleDeleteCustomer(Request req, Response res) throws IOException {
         int id = extractIdFromPath(req.getHttpExchange().getRequestURI().getPath(), "/customers/(\\d+)");
+
         if (id == -1) {
             res.sendError(HttpURLConnection.HTTP_BAD_REQUEST, "Invalid Customer ID");
             return;
         }
 
-        if (customerService.deleteCustomer(id)) {
+        if (customerDAO.deleteCustomer(id)) {
             res.sendSuccess(HttpURLConnection.HTTP_OK, "Customer deleted successfully");
         } else {
             res.sendError(HttpURLConnection.HTTP_NOT_FOUND, "Customer not found or failed to delete");
         }
     }
-}
-
+}
\ No newline at end of file
